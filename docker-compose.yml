version: "3"

volumes: 
  logs:

services:
  #
  # Container to make fake logs
  #
  logs:
    build:
      context: docker/logs
      dockerfile: "Dockerfile"
    volumes:
      - logs:/logs/
    restart: "always"

  #
  # Tool container for importing/exporting dashboards.
  #
  tools:
    build:
      context: docker/tools
      dockerfile: "Dockerfile"
    environment:
      DOCKER: 1
    volumes:
      - .:/mnt
      - logs:/logs/
      - ./data/loki-wal:/data/wal
    restart: "always"

  #
  # Container to continuously ping hosts.
  #
  ping:
    build:
      context: docker/ping
      dockerfile: "Dockerfile"
    environment:
      #
      # Hosts to ping.  Can be hostname or IP.  Space-delimited.
      # Note that DNS lookups may fail, so consider pinging some IPs...
      #
      HOSTS: "google.com amazon.com google-dns cloudflare-dns "
      #
      # Comment the previous line and uncomment this one if you'd like to ping 
      # some hosts on different continents.
      #
      #HOSTS: "google.com amazon.com google-dns cloudflare-dns cheetah.jp leopard.se"
    volumes:
      - logs:/logs/
      - ./hosts.txt:/etc/hosts
    restart: "always"

  #
  # Container to issue HTTP requests
  #
  http-ping:
    build:
      context: docker/http-ping
      dockerfile: "Dockerfile"
    environment:
      #
      # URLs to query.  Space-delimited.
      # Format is: URL,interval,connect_timeout,content_timeout
      # Default interval, connect, and content timeouts are 10 seconds.
      #
      # Some sample URLs to force different kinds of errors:
      #
      # https://httpbin.dmuth.org/status/xxx - Return the specified status code
      # https://httpbin.dmuth/org/delay/n - Return after a delay of n seconds
      # http://localhost:12345/ - Connection Refused
      # http://localhost.invalid/ - DNS Lookup failure
      # http://10.255.255.254 - Timeout
      # http://10.255.255.255 - Network unreachable
      # 
      # More interesting URLs can be found in docker-compose.override.yml
      #
      URLS: "https://www.google.com/robots.txt https://httpbin.dmuth.org/status/204"
    volumes:
      - .:/mnt
      - logs:/logs/
      - ./hosts.txt:/etc/hosts
    restart: "always"

  #
  # Read logs from files and ingest into Loki.
  #
  promtail:
    image: grafana/promtail:latest
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    volumes:
      - logs:/logs/
      - ./config:/mnt/config
      - ./data/promtail:/mnt/var
      - /var/log:/var/log
    command: -config.file=/mnt/config/promtail-config-docker.yaml
    ports:
      - "9081:9080"
    restart: "always"


  #
  # The Loki database for storing logs.
  #
  loki:
    image: grafana/loki:latest
    user: root
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    volumes:
      - ./config:/mnt/config
      - ./data/loki-data:/tmp/loki
      - ./data/loki-wal:/tmp/wal
    command: -config.file=/mnt/config/loki-config.yaml
    ports:
      - "3100:3100"
    restart: "always"


  #
  # Grafana, for viewing via the UI.
  #
  grafana:
    image: grafana/grafana:latest
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    #
    # Not thrilled with having to run as root in the container, but trying
    # to run this in a Linux VM as a non-root user has permission issues, 
    # since Docker commands are normally run as root...
    #
    user: root
    volumes:
      - ./data/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: "always"



